Testing Composer.VERSION = 0.4.5
================
Partial: [_a-z][_a-z0-9]*
Composed: /^([_a-z][_a-z0-9]*|\*\*aabb\*\*|.|\s|\D+)*?$/i
Expected: /^([_a-z][_a-z0-9]*|\*\*aabb\*\*|.|\s|\D+)*?$/i
================

Testing Analyzer.VERSION = 0.6.0
=========================================
Input                                       : /(?<named_group>[abc\u0012]+)\x12/gi
Regular Expression                          : (?<named_group>[abc\u0012]+)\x12
Regular Expression Flags                    : i,g
=============================================
Regular Expression Syntax Tree              : 
{
    "type": "Sequence",
    "value": [
        {
            "type": "Group",
            "value": {
                "type": "Sequence",
                "value": [
                    {
                        "type": "Quantifier",
                        "value": {
                            "type": "CharacterGroup",
                            "value": [
                                {
                                    "type": "Characters",
                                    "value": [
                                        "a",
                                        "b",
                                        "c"
                                    ],
                                    "flags": {}
                                },
                                {
                                    "type": "UnicodeChar",
                                    "value": "u0012",
                                    "flags": {
                                        "Char": "\u0012",
                                        "Code": "0012"
                                    }
                                }
                            ],
                            "flags": {}
                        },
                        "flags": {
                            "MatchOneOrMore": 1,
                            "min": 1,
                            "max": -1,
                            "isGreedy": 1
                        }
                    }
                ],
                "flags": {}
            },
            "flags": {
                "NamedGroup": 1,
                "GroupName": "named_group",
                "GroupIndex": 1
            }
        },
        {
            "type": "HexChar",
            "value": "x12",
            "flags": {
                "Char": "\u0012",
                "Code": "12"
            }
        }
    ],
    "flags": {}
}
=============================================
Regular Expression Reconstructed Source     : ([abc\u0012]+)\x12
=============================================
Regular Expression (Named) Matched Groups   : 
{
    "1": 1,
    "named_group": 1
}
=============================================
Regular Expression Peek Characters          : 
{
    "positive": [
        "a",
        "b",
        "c",
        "\u0012",
        "A",
        "B",
        "C"
    ],
    "negative": []
}
=============================================
Regular Expression Minimum / Maximum Length : 
{
    "minimum": 2,
    "maximum": "unlimited"
}
=============================================
Regular Expression Sample Match Strings     : 
[
    {
        "sample": "\u0012a\u0012",
        "match": "yes"
    },
    {
        "sample": "\u0012\u0012\u0012\u0012",
        "match": "no"
    },
    {
        "sample": "\u0012\u0012",
        "match": "yes"
    },
    {
        "sample": "\u0012\u0012\u0012",
        "match": "no"
    },
    {
        "sample": "\u0012\u0012C\u0012\u0012",
        "match": "yes"
    }
]
=============================================
