Testing Composer.VERSION = 0.4.5
================
Partial: [_a-z][_a-z0-9]*
Composed: /^([_a-z][_a-z0-9]*|\*\*aabb\*\*|.|\s|\D+)*?$/i
Expected: /^([_a-z][_a-z0-9]*|\*\*aabb\*\*|.|\s|\D+)*?$/i
================

Testing Analyzer.VERSION = 0.6.0
=========================================
Input                                       : /(?P<named_group>[abcde]+)fgh(?P=named_group)(?# a comment)/i
Regular Expression                          : (?P<named_group>[abcde]+)fgh(?P=named_group)(?# a comment)
Regular Expression Flags                    : i
Reconstructed Regular Expression            : ([abcde]+)fgh\1
=============================================
Regular Expression Syntax Tree              : 
{
    "type": "Sequence",
    "value": [
        {
            "type": "Group",
            "value": {
                "type": "Sequence",
                "value": [
                    {
                        "type": "Quantifier",
                        "value": {
                            "type": "CharacterGroup",
                            "value": [
                                {
                                    "type": "Characters",
                                    "value": [
                                        "a",
                                        "b",
                                        "c",
                                        "d",
                                        "e"
                                    ]
                                }
                            ]
                        },
                        "flags": {
                            "MatchOneOrMore": 1,
                            "min": 1,
                            "max": -1,
                            "isGreedy": 1
                        }
                    }
                ]
            },
            "flags": {
                "NamedGroup": 1,
                "GroupName": "named_group",
                "GroupIndex": 1
            }
        },
        {
            "type": "String",
            "value": "fgh"
        },
        {
            "type": "Special",
            "value": "1",
            "flags": {
                "BackReference": 1,
                "GroupName": "named_group",
                "GroupIndex": 1
            }
        },
        {
            "type": "Comment",
            "value": " a comment"
        }
    ]
}
=============================================
Regular Expression (Named) Matched Groups   : 
{
    "1": 1,
    "named_group": 1
}
=============================================
Regular Expression Peek Characters          : 
{
    "positive": [
        "a",
        "b",
        "c",
        "d",
        "e",
        "A",
        "B",
        "C",
        "D",
        "E"
    ],
    "negative": []
}
=============================================
Regular Expression Minimum / Maximum Length : 
{
    "minimum": 5,
    "maximum": "unlimited"
}
=============================================
Regular Expression Sample Match Strings     : 
[
    {
        "sample": "ACbfghACb",
        "match": "yes",
        "groups": {
            "1": "ACb",
            "named_group": "ACb"
        }
    },
    {
        "sample": "bbCFGHbbC",
        "match": "yes",
        "groups": {
            "1": "bbC",
            "named_group": "bbC"
        }
    },
    {
        "sample": "CDfghCD",
        "match": "yes",
        "groups": {
            "1": "CD",
            "named_group": "CD"
        }
    },
    {
        "sample": "dDcfghdDc",
        "match": "yes",
        "groups": {
            "1": "dDc",
            "named_group": "dDc"
        }
    },
    {
        "sample": "deCfghdeC",
        "match": "yes",
        "groups": {
            "1": "deC",
            "named_group": "deC"
        }
    }
]
=============================================
