RegexAnalyzer Module loaded succesfully
Testing Analyzer.VERSION = 0.6.0

=========================================

Input                                       : /(?P<named_group>[abcde]+)fgh(?P=named_group)(?# a comment)/i

Regular Expression                          : (?P<named_group>[abcde]+)fgh(?P=named_group)(?# a comment)

Regular Expression Flags                    : i

Reconstructed Regular Expression            : ([abcde]+)fgh\1

=============================================

Regular Expression Syntax Tree              : 

{   'flags': {},
    'type': 'Sequence',
    'value': [   {   'flags': {   'GroupIndex': 1,
                                  'GroupName': 'named_group',
                                  'NamedGroup': 1},
                     'type': 'Group',
                     'value': {   'flags': {},
                                  'type': 'Sequence',
                                  'value': [   {   'flags': {   'MatchOneOrMore': 1,
                                                                'isGreedy': 1,
                                                                'max': -1,
                                                                'min': 1},
                                                   'type': 'Quantifier',
                                                   'value': {   'flags': {   },
                                                                'type': 'CharacterGroup',
                                                                'value': [   {   'flags': {   },
                                                                                 'type': 'Characters',
                                                                                 'value': [   'a',
                                                                                              'b',
                                                                                              'c',
                                                                                              'd',
                                                                                              'e']}]}}]}},
                 {'flags': {}, 'type': 'String', 'value': 'fgh'},
                 {   'flags': {   'BackReference': 1,
                                  'GroupIndex': 1,
                                  'GroupName': 'named_group'},
                     'type': 'Special',
                     'value': '1'},
                 {'flags': {}, 'type': 'Comment', 'value': ' a comment'}]}

=============================================

Regular Expression (Named) Matched Groups   : 

{'1': 1, 'named_group': 1}

=============================================

Regular Expression Peek Characters          : 

{   'negative': [],
    'positive': ['a', 'A', 'c', 'b', 'e', 'd', 'C', 'B', 'E', 'D']}

=============================================

Regular Expression Minimum / Maximum Length : 

{'maximum': 'unlimited', 'minimum': 4}

=============================================

Regular Expression Sample Match Strings     : 

[   {'groups': {}, 'match': 'no', 'sample': 'cECCFGH'},
    {'groups': {}, 'match': 'no', 'sample': 'CECaFGH'},
    {'groups': {}, 'match': 'no', 'sample': 'EdDFGH'},
    {'groups': {}, 'match': 'no', 'sample': 'BbECFGH'},
    {'groups': {}, 'match': 'no', 'sample': 'bcFGH'}]

=============================================

